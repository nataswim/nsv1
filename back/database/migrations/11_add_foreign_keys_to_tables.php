// File: 15_add_foreign_keys_to_tables.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

/**
 * ðŸ‡¬ðŸ‡§ Migration to add all foreign key constraints to the application tables.
 * ðŸ‡«ðŸ‡· Migration pour ajouter toutes les contraintes de clÃ© Ã©trangÃ¨re aux tables de l'application.
 */
return new class extends Migration
{
    /**
     * ðŸ‡¬ðŸ‡§ Run the migrations.
     * ðŸ‡«ðŸ‡· ExÃ©cuter la migration.
     */
    public function up(): void
    {
        // ðŸ‡¬ðŸ‡§ Add foreign keys to uploads table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table uploads
        Schema::table('uploads', function (Blueprint $table) {
            $table->foreign('user_id')->references('id')->on('users')->onDelete('set null');
        });

        // ðŸ‡¬ðŸ‡§ Add foreign keys to exercises table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table exercises
        Schema::table('exercises', function (Blueprint $table) {
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('upload_id')->references('id')->on('uploads')->onDelete('set null');
        });

        // ðŸ‡¬ðŸ‡§ Add foreign keys to pages table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table pages
        Schema::table('pages', function (Blueprint $table) {
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('upload_id')->references('id')->on('uploads')->onDelete('set null');
        });

        // ðŸ‡¬ðŸ‡§ Add foreign keys to workouts table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table workouts
        if (Schema::hasTable('workouts') && Schema::hasColumn('workouts', 'user_id')) {
            Schema::table('workouts', function (Blueprint $table) {
                // VÃ©rifier si la contrainte existe dÃ©jÃ 
                if (!$this->hasConstraint('workouts', 'workouts_user_id_foreign')) {
                    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
                }
            });
        }
        
        // ðŸ‡¬ðŸ‡§ Add foreign keys to plans table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table plans
        if (Schema::hasTable('plans') && Schema::hasColumn('plans', 'user_id')) {
            Schema::table('plans', function (Blueprint $table) {
                // VÃ©rifier si la contrainte existe dÃ©jÃ 
                if (!$this->hasConstraint('plans', 'plans_user_id_foreign')) {
                    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
                }
            });
        }

        // ðŸ‡¬ðŸ‡§ Add foreign keys to swim_sets table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table swim_sets
        if (Schema::hasTable('swim_sets')) {
            Schema::table('swim_sets', function (Blueprint $table) {
                if (Schema::hasColumn('swim_sets', 'workout_id')) {
                    $table->foreign('workout_id')->references('id')->on('workouts')->onDelete('cascade');
                }
                if (Schema::hasColumn('swim_sets', 'exercise_id')) {
                    $table->foreign('exercise_id')->references('id')->on('exercises')->onDelete('set null');
                }
            });
        }
        
        // ðŸ‡¬ðŸ‡§ Add foreign keys to mylist table 
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table mylist
        if (Schema::hasTable('mylist') && Schema::hasColumn('mylist', 'user_id')) {
            Schema::table('mylist', function (Blueprint $table) {
                if (!$this->hasConstraint('mylist', 'mylist_user_id_foreign')) {
                    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
                }
            });
        }
        
        // ðŸ‡¬ðŸ‡§ Check if we need to use my_lists instead of mylist
        // ðŸ‡«ðŸ‡· VÃ©rifier si nous devons utiliser my_lists au lieu de mylist
        if (!Schema::hasTable('mylist') && Schema::hasTable('my_lists') && Schema::hasColumn('my_lists', 'user_id')) {
            Schema::table('my_lists', function (Blueprint $table) {
                if (!$this->hasConstraint('my_lists', 'my_lists_user_id_foreign')) {
                    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
                }
            });
        }
        
        // ðŸ‡¬ðŸ‡§ Add foreign keys to workout_exercises table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table workout_exercises
        if (Schema::hasTable('workout_exercises')) {
            Schema::table('workout_exercises', function (Blueprint $table) {
                if (Schema::hasColumn('workout_exercises', 'workout_id') && 
                    !$this->hasConstraint('workout_exercises', 'workout_exercises_workout_id_foreign')) {
                    $table->foreign('workout_id')->references('id')->on('workouts')->onDelete('cascade');
                }
                if (Schema::hasColumn('workout_exercises', 'exercise_id') && 
                    !$this->hasConstraint('workout_exercises', 'workout_exercises_exercise_id_foreign')) {
                    $table->foreign('exercise_id')->references('id')->on('exercises')->onDelete('cascade');
                }
            });
        }
        
        // ðŸ‡¬ðŸ‡§ Add foreign keys to workout_swim_sets table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table workout_swim_sets
        if (Schema::hasTable('workout_swim_sets')) {
            Schema::table('workout_swim_sets', function (Blueprint $table) {
                if (Schema::hasColumn('workout_swim_sets', 'workout_id') && 
                    !$this->hasConstraint('workout_swim_sets', 'workout_swim_sets_workout_id_foreign')) {
                    $table->foreign('workout_id')->references('id')->on('workouts')->onDelete('cascade');
                }
                if (Schema::hasColumn('workout_swim_sets', 'swim_set_id') && 
                    !$this->hasConstraint('workout_swim_sets', 'workout_swim_sets_swim_set_id_foreign')) {
                    $table->foreign('swim_set_id')->references('id')->on('swim_sets')->onDelete('cascade');
                }
            });
        }
        
        // ðŸ‡¬ðŸ‡§ Add foreign keys to plan_workouts table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table plan_workouts
        if (Schema::hasTable('plan_workouts')) {
            Schema::table('plan_workouts', function (Blueprint $table) {
                if (Schema::hasColumn('plan_workouts', 'plan_id') && 
                    !$this->hasConstraint('plan_workouts', 'plan_workouts_plan_id_foreign')) {
                    $table->foreign('plan_id')->references('id')->on('plans')->onDelete('cascade');
                }
                if (Schema::hasColumn('plan_workouts', 'workout_id') && 
                    !$this->hasConstraint('plan_workouts', 'plan_workouts_workout_id_foreign')) {
                    $table->foreign('workout_id')->references('id')->on('workouts')->onDelete('cascade');
                }
            });
        }
        
        // ðŸ‡¬ðŸ‡§ Add foreign keys to mylist_items table
        // ðŸ‡«ðŸ‡· Ajouter des clÃ©s Ã©trangÃ¨res Ã  la table mylist_items
        if (Schema::hasTable('mylist_items') && Schema::hasColumn('mylist_items', 'mylist_id')) {
            Schema::table('mylist_items', function (Blueprint $table) {
                if (!$this->hasConstraint('mylist_items', 'mylist_items_mylist_id_foreign')) {
                    if (Schema::hasTable('mylist')) {
                        $table->foreign('mylist_id')->references('id')->on('mylist')->onDelete('cascade');
                    } elseif (Schema::hasTable('my_lists')) {
                        $table->foreign('mylist_id')->references('id')->on('my_lists')->onDelete('cascade');
                    }
                }
            });
        }
    }

    /**
     * ðŸ‡¬ðŸ‡§ Helper method to check if a constraint already exists
     * ðŸ‡«ðŸ‡· MÃ©thode auxiliaire pour vÃ©rifier si une contrainte existe dÃ©jÃ 
     */
    private function hasConstraint($table, $constraintName)
    {
        $conn = Schema::getConnection();
        $dbSchemaManager = $conn->getDoctrineSchemaManager();
        $doctrineTable = $dbSchemaManager->listTableDetails($table);
        
        return $doctrineTable->hasIndex($constraintName);
    }

    /**
     * ðŸ‡¬ðŸ‡§ Reverse the migrations.
     * ðŸ‡«ðŸ‡· Annuler la migration.
     */
    public function down(): void
    {
        // ðŸ‡¬ðŸ‡§ Drop foreign keys from uploads table
        // ðŸ‡«ðŸ‡· Supprimer les clÃ©s Ã©trangÃ¨res de la table uploads
        if (Schema::hasTable('uploads')) {
            Schema::table('uploads', function (Blueprint $table) {
                $table->dropForeign(['user_id']);
            });
        }

        // ðŸ‡¬ðŸ‡§ Drop foreign keys from exercises table
        // ðŸ‡«ðŸ‡· Supprimer les clÃ©s Ã©trangÃ¨res de la table exercises
        if (Schema::hasTable('exercises')) {
            Schema::table('exercises', function (Blueprint $table) {
                $table->dropForeign(['user_id']);
                $table->dropForeign(['upload_id']);
            });
        }

        // ðŸ‡¬ðŸ‡§ Drop foreign keys from pages table
        // ðŸ‡«ðŸ‡· Supprimer les clÃ©s Ã©trangÃ¨res de la table pages
        if (Schema::hasTable('pages')) {
            Schema::table('pages', function (Blueprint $table) {
                $table->dropForeign(['user_id']);
                $table->dropForeign(['upload_id']);
            });
        }

        // MÃªme chose pour les autres tables...
        // Code similaire pour supprimer les clÃ©s Ã©trangÃ¨res des autres tables
        
        // workouts
        if (Schema::hasTable('workouts')) {
            Schema::table('workouts', function (Blueprint $table) {
                if (Schema::hasColumn('workouts', 'user_id')) {
                    $table->dropForeign(['user_id']);
                }
            });
        }
        
        // plans
        if (Schema::hasTable('plans')) {
            Schema::table('plans', function (Blueprint $table) {
                if (Schema::hasColumn('plans', 'user_id')) {
                    $table->dropForeign(['user_id']);
                }
            });
        }
        
        // swim_sets
        if (Schema::hasTable('swim_sets')) {
            Schema::table('swim_sets', function (Blueprint $table) {
                if (Schema::hasColumn('swim_sets', 'workout_id')) {
                    $table->dropForeign(['workout_id']);
                }
                if (Schema::hasColumn('swim_sets', 'exercise_id')) {
                    $table->dropForeign(['exercise_id']);
                }
            });
        }
        
        // Et les autres tables (mylist, workout_exercises, workout_swim_sets, plan_workouts, mylist_items)
        // ...
    }
};